name: Create Branch

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      fileWildcard:
        default: "*"
      
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:   
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set today
        id: today
        run: echo "TODAY=$(date)" >> $GITHUB_OUTPUT

      - name: Set branch name
        id: branch-name
        run: echo "BRANCH=$(echo ClinicalObservations-${{ steps.today.outputs.TODAY }} | tr -d '[:space:]' | tr -d ':')" >> $GITHUB_OUTPUT
      
      - name: create package folder and copy files
        run: |
          mkdir -p temp
          mkdir -p temp/package/
          find . -type f \( -name "*.json" -o -name "*.xml" \) -not -path "./examples/*" -name "${{github.event.inputs.fileWildcard}}" | xargs -I {} cp {} temp/package/ #
          #find . -type f \( -name "*.json" -o -name "*.xml" \) -not -path "./examples/*" ! -name "package.json" -exec grep -l '${{github.event.inputs.fileWildcard}}' {} + | xargs -I {} cp {} temp/package/
          cp package.json temp/package/
          mkdir -p temp/example
          find ./examples -type f -name "${{github.event.inputs.fileWildcard}}" | xargs -I {} cp {} temp/example/
          #find ./examples -type f -exec grep -l '${{github.event.inputs.fileWildcard}}' {} + | xargs -I {} cp {} temp/example/

      - name: Find and convert XML files to JSON
        run: |
          post_xml_files() {
            local dir=$1
            local files=($(find "$dir" -type f -name "*.xml"))
            for file in "${files[@]}"; do
              curl -X 'POST' \
              'https://3cdzg7kbj4.execute-api.eu-west-2.amazonaws.com/poc/Conformance/FHIR/R4/$convert' \
              -H 'accept: application/fhir+json' \
              -H 'Content-Type: application/fhir+xml' \
              -d @"$file" -o "${file%.xml}.json"
              echo "File $file posted and response saved as ${file%.xml}.json"

              rm "$file"
              echo "File $file deleted"
            done
          }
          post_xml_files ./temp/package
          post_xml_files ./temp/example

      - name: tarbell package
        run: |
          name=$(jq -r '.name' package.json)
          version=$(jq -r '.version' package.json)
          tar_filename="${name} ${version}.tar.gz"
          tar -czvf "$tar_filename" temp/package temp/example

      - name: Create branch and commit
        run: |
          git config --global user.name "Workflows.Backup"
          git config --global user.email "username@users.noreply.github.com"
          git checkout -b ${{ steps.branch-name.outputs.BRANCH }}
          git add -A
          git commit -m "${{ steps.today.outputs.TODAY }}"
          git push origin ${{ steps.branch-name.outputs.BRANCH }}
          
      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          retries: 10
          script: |
            const { repo, owner } = context.repo;
            const result = await github.rest.pulls.create({
              title: '${{github.event.inputs.fileWildcard}} ${{ steps.today.outputs.TODAY }}',
              owner,
              repo,
              head: '${{ steps.branch-name.outputs.BRANCH }}',
              base: 'main',
              body: [
                'This PR is auto-generated by',
                '[actions/github-script](https://github.com/actions/github-script).'
              ].join('\n')
            });
            github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: result.data.number,
              labels: ['backup', 'automated pr']
            });

      - name: "Merge pull request"
        uses: "actions/github-script@v7"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          retries: 10
          script: |
            const { repo, owner } = context.repo;
            const head = '${{ steps.branch-name.outputs.BRANCH }}'
            await new Promise(r => setTimeout(r, 2000));
            const { data } = await github.rest.pulls.list({ owner, repo, head, per_page: 1 });
            if (data.length) {
              const pull_number = data[0].number;
              await github.rest.pulls.merge({ owner, repo, pull_number, merge_method: "squash"});
            }
